ï»?* Copyright Statement:
 *
 * (C) 2019  Airoha Technology Corp. All rights reserved.
 *
 * This software/firmware and related documentation ("Airoha Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to Airoha Technology Corp. ("Airoha") and/or its licensors.
 * Without the prior written permission of Airoha and/or its licensors,
 * any reproduction, modification, use or disclosure of Airoha Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 * You may only use, reproduce, modify, or distribute (as applicable) Airoha Software
 * if you have agreed to and been bound by the applicable license agreement with
 * Airoha ("License Agreement") and been granted explicit permission to do so within
 * the License Agreement ("Permitted User").  If you are not a Permitted User,
 * please cease any access or use of Airoha Software immediately.
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT AIROHA SOFTWARE RECEIVED FROM AIROHA AND/OR ITS REPRESENTATIVES
 * ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. AIROHA EXPRESSLY DISCLAIMS ANY AND ALL
 * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES AIROHA PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH AIROHA SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN AIROHA SOFTWARE. AIROHA SHALL ALSO NOT BE RESPONSIBLE FOR ANY AIROHA
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND AIROHA'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO AIROHA SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT AIROHA'S OPTION, TO REVISE OR REPLACE AIROHA SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * AIROHA FOR SUCH AIROHA SOFTWARE AT ISSUE.
 */

/**
 * @addtogroup aw7698_evk aw7698_evk
 * @{
 * @addtogroup aw7698_evk_apps apps
 * @{
 * @addtogroup aw7698_evk_apps_fota_over_wifi fota_over_wifi
 * @{

@par Overview
  - Example project description
    - This example demonstrates the basic workflow of the full binary FOTA
      update based on the LinkIt 7698 EVK.
  - Application features
    - Act as a Wi-Fi station to connect to a Wi-Fi network.
    - Use CLI command to trigger the FOTA download and update process.

@par Hardware and software environment
  - Supported platform
    - LinkIt 7698 EVK.
  - Environment configuration
    - The output logs are communicated through a micro-USB cable to the PC
      from USB (CON5) connector on the EVK.
      - Install the mbed serial driver according to the instructions at
        https://developer.mbed.org/handbook/Windows-serial-configuration. For
        more information, please refer to section "Installing the LinkIt 7698
        EVK drivers on Microsoft Windows" on the "LinkIt 7698 EVK User Guide"
        in [sdk_root]/doc folder.
      - Use a type-A to micro-B USB cable to connect type-A USB of the PC and
        MK20 micro-B USB connector on the LinkIt 7698 EVK. For more
        information about the connector cable, please refer to
        https://en.wikipedia.org/wiki/USB#Mini_and_micro_connectors.
      - Launch a terminal emulator program, such as Tera terminal on your PC
        for data logging through UART. For the installation details, please
        refer to section "Installing Tera terminal on Microsoft Windows" on
        the "Airoha IoT SDK Get Started Guide" in [sdk_root]/doc folder.
      - COM port settings. baudrate: 115200, data bits: 8, stop bit: 1,
        parity: none and flow control: off.

@par Directory contents
  - Source and header files
    - \b src/cli_cmds.c            CLI commands of this project.
    - \b src/cli_def.c             CLI initialize sequence code.
    - \b src/ept_eint_var.c        EINT configuration file generated by Easy
                                   Pinmux Tool(EPT). Please do not edit the
                                   file.
    - \b src/ept_gpio_var.c        GPIO configuration file generated by Easy
                                   Pinmux Tool(EPT). Please do not edit the
                                   file.
    - \b src/main.c                Entry point of the application program.
    - \b src/wifi_nvdm_config.c    Default user configuration file.
    - \b src/sys_init.c            Aggregated initialization routines.
    - \b src/system_aw7698.c       AW7698 system clock configuration file.
    - \b src/wifi_lwip_helper.c    LwIP configuration.
    - \b inc/cli_cmds.h            Declares the reference point of CLI
                                   commands of cli_cmds.c. To be used by
                                   cli_def.c
    - \b inc/FreeRTOSConfig.h      AW7698 FreeRTOS configuration file.
    - \b inc/ept_eint_drv.h        The EINT configuration file generated by
                                   Easy Pinmux Tool(EPT). Please do not edit
                                   the file.
    - \b inc/ept_gpio_drv.h        The GPIO configuration file generated by
                                   Easy Pinmux Tool(EPT). Please do not edit
                                   the file.
    - \b inc/memory_map.h          AW7698 memory layout symbol file.
    - \b inc/hal_feature_config.h  AW7698 HAL API feature configuration file.
    - \b inc/lwipopts.h            LwIP configuration.
    - \b inc/sys_init.h            Prototype declaration for \b src/sys_init.c.
    - \b inc/task_def.h            The configuration of running tasks of the
                                   project.
    - \b inc/wifi_lwip_helper.h    Prototype declaration for
                                   \b src/wifi_lwip_helper.c.
    - \b inc/wifi_nvdm_config.h    Prototype declaration for default user
                                   configuration file.

  - Project configuration files using GCC.
    - \b GCC/Makefile              GNU Makefile for this project.
    - \b GCC/feature.mk            Generic feature options configuration file.
    - \b GCC/aw7698_flash.ld       Linker script.
    - \b GCC/startup_aw7698.s      AW7698 startup file.
    - \b GCC/syscalls.c            AW7698 syscalls implementation.

@par Run the examples
  - Connect the board to a PC with a USB cable.
  - Build the example project and download the binary file to the LinkIt
    7698 EVK.
  - Reboot the EVK, the console will show "FreeRTOS Running" message to
    indicate the EVK is booting up.
  - Use '?' and enter to query the available command line options.
    Note that the command line options are still under development and subject
    to change without notice.
  - Use the following commands to connect to your Wi-Fi access point.
    \code
      config write STA Ssid <ap_name>
      config write STA SsidLen <ap_name_length>
      config write STA WpaPsk <password>
      reboot
    \endcode
  - After the IP address is obtained, the Wi-Fi connection is established
    successfully.
  - Use the following command to trigger FOTA download:
    fota httpdl url
    E.g. fota httpdl http://192.168.0.198/image.bin
  - The downloading process will be shown in log.
  - After the download finishes, input the following commands to trigger the
    FOTA update.
    fota go
    reboot
  - The device will reboot and the bootloader will execute the FOTA update flow.

*/
/**
 * @}
 * @}
 * @}
 */
