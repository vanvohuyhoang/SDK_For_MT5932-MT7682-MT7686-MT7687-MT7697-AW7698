/* Copyright Statement:
 *
 * (C) 2017  Airoha Technology Corp. All rights reserved.
 *
 * This software/firmware and related documentation ("Airoha Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to Airoha Technology Corp. ("Airoha") and/or its licensors.
 * Without the prior written permission of Airoha and/or its licensors,
 * any reproduction, modification, use or disclosure of Airoha Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 * You may only use, reproduce, modify, or distribute (as applicable) Airoha Software
 * if you have agreed to and been bound by the applicable license agreement with
 * Airoha ("License Agreement") and been granted explicit permission to do so within
 * the License Agreement ("Permitted User").  If you are not a Permitted User,
 * please cease any access or use of Airoha Software immediately.
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT AIROHA SOFTWARE RECEIVED FROM AIROHA AND/OR ITS REPRESENTATIVES
 * ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. AIROHA EXPRESSLY DISCLAIMS ANY AND ALL
 * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES AIROHA PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH AIROHA SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN AIROHA SOFTWARE. AIROHA SHALL ALSO NOT BE RESPONSIBLE FOR ANY AIROHA
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND AIROHA'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO AIROHA SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT AIROHA'S OPTION, TO REVISE OR REPLACE AIROHA SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * AIROHA FOR SUCH AIROHA SOFTWARE AT ISSUE.
 */

/**
 * @addtogroup aw7698_evk aw7698_evk
 * @{
 * @addtogroup aw7698_evk_apps apps
 * @{
 * @addtogroup aw7698_evk_apps_wifi_demo wifi_demo
 * @{

@par Overview
  - Example project description
    - This project demonstrates the Wi-Fi connectivity and Bluetooth low energy (LE) connectivity
      features of the 7698 EVK through the following:
      - How to use the Wi-Fi profile settings stored in the NVDM to initialize
        the Wi-Fi.
      - How to use the tickless feature to achieve low power consumption.
  - Application features
    - Act as a Wi-Fi station to connect to a Wi-Fi network.
    - Act as a Wi-Fi AP to accept connection to the 7698 EVK using a
      handheld device or a laptop computer.
    - Ping out or into the device.
    - All Wi-Fi Command Line Interface (CLI) commands are supported in this
      project.
    - Act as a Bluetooth low energy (LE) device. All Bluetooth Command Line
      Interface (CLI) commands are supported in this project.

@par Hardware and software environment
  - Supported platform
    - 7698 EVK.
  - Environment configuration
    - The output logs are communicated through a micro-USB cable to the PC
      from USB (CON5) connector on the EVK.
      - Install the mbed serial driver according to the instructions at
        https://developer.mbed.org/handbook/Windows-serial-configuration. For
        more information, please refer to section "Installing the 7698
        EVK drivers on Microsoft Windows" on the "AW7698 EVK User Guide"
        in [sdk_root]/doc folder.
      - Use a type-A to micro-B USB cable to connect type-A USB of the PC and
        MK20 micro-B USB connector on the 7698 EVK. For more
        information about the connector cable, please refer to
        https://en.wikipedia.org/wiki/USB#Mini_and_micro_connectors.
      - Launch a terminal emulator program, such as Tera terminal on your PC
        for data logging through UART. For the installation details, please
        refer to section "Installing Tera terminal on Microsoft Windows" on
        the "Airoha IoT SDK Get Started Guide" in [sdk_root]/doc folder.
      - COM port settings. baudrate: 115200, data bits: 8, stop bit: 1,
        parity: none and flow control: off.
        
@par Directory contents
  - Source and header files
    - \b src/cli_cmds.c            CLI commands of this project.
    - \b src/cli_def.c             CLI initialize sequence code.
    - \b src/ept_eint_var.c        EINT configuration file generated by
                                        Easy Pinmux Tool(EPT). Please do
                                        not edit the file.
    - \b src/ept_gpio_var.c        GPIO configuration file generated by
                                        Easy Pinmux Tool(EPT). Please do not
                                        edit the file.
    - \b src/main.c                Entry point of the application program.
    - \b src/wifi_nvdm_config.c    Default user configuration file.
    - \b src/sys_init.c            Aggregated initialization routines.
    - \b src/system_aw7698.c       AW7698 system clock configuration file.
    - \b src/wifi_lwip.c           LwIP configuration.
    - \b src/bt_init.c:           Bluetooth memory initialization and task
                                  creation.
    - \b src/hci_log.c:           Bluetooth HCI log file. The user must
                                  initiate the UART port for HCI logging.
    - \b src/ut_app/.:            Bluetooth CLI command handler.
    - \b inc/bt_init.h:           Declare the Bluetooth task create API.

    - \b inc/cli_cmds.h            Declares the reference point of CLI
                                        commands of cli_cmds.c. To be used
                                        by cli_def.c
    - \b inc/FreeRTOSConfig.h      AW7698 FreeRTOS configuration file.
    - \b inc/ept_eint_drv.h        The EINT configuration file generated
                                        by Easy Pinmux Tool(EPT). Please do
                                        not edit the file.
    - \b inc/ept_gpio_drv.h        The GPIO configuration file generated
                                        by Easy Pinmux Tool(EPT). Please do
                                        not edit the file.
    - \b inc/flash_map.h           AW7698 memory layout symbol file.
    - \b inc/hal_feature_config.h  AW7698 HAL API feature configuration
                                        file.
    - \b inc/lwipopts.h            LwIP configuration.
    - \b inc/hci_log.h:           Declare the Bluetooth HCI log API.
    - \b inc/project_config.h:    Define the maximum number of Bluetooth
                                  connections and timer. And define the buffer
                                  size of the TX/RX, timer and connection.
    - \b inc/sys_init.h            Prototype declaration for \b src/sys_init.c.
    - \b inc/task_def.h            The configuration of running tasks of
                                        the project.
    - \b inc/wifi_lwip.h           Prototype declaration for \b src/wifi_lwip.c.
    - \b inc/wifi_nvdm_config.h    Prototype declaration for default user
                                        configuration file.

  - Project configuration files using GCC.
    - \b GCC/Makefile              GNU Makefile for this project.
    - \b GCC/feature.mk            Generic feature options configuration
                                        file.
    - \b GCC/aw7698_flash.ld       Linker script.
    - \b GCC/startup_aw7698.s      AW7698 startup file.
    - \b GCC/syscalls.c            AW7698 syscalls implementation.


@par Run the examples
  - Connect the board to a PC with a USB cable.
  - Build the example project and download the binary file to the 
    7698 EVK.
  - Reboot the EVK, the console will show "FreeRTOS Running" message to
    indicate the EVK is booting up.
  - Use '?' and enter to query the available command line options.
    Note that the command line options are still under development and subject
    to change without notice.
  - The following three examples demonstrate the Wi-Fi station and Wi-Fi access
    point modes of the 7698 EVK, and connect the EVK with nearby Bluetooth LE enabled
    devices.
  - Example 1. Wi-Fi station mode.
    - Find your Wi-Fi access point settings:
      Before connecting to a Wi-Fi access point, the following information
      needs to be collected:
      -# The SSID of your Wi-Fi access point.
      -# The authentication mode of your Wi-Fi access point.
          In general, the authentication mode is WPA PSK or WPA2 PSK.
          To change the mode, please refer to Table 1 for the list of supported
          authentication modes.
      -# The password of your Wi-Fi access point.
      -# The encryption mode of your Wi-Fi access point.
          In general, AES or TKIP is used.
          To change the mode, please refer to Table 2 for the list of supported
          encryption modes.
    - Once the information is collected, use the following commands to configure
      the 7698 EVK. The example code in main.c assumes either WPA PSK or
      WPA2 PSK is used for authentication, TKIP or AES for encryption, 'myhome'
      (length 6) for the SSID, and the password of the WPA or WPA2 is
      '12345678' (length 8).
      \code
        config write STA AuthMode 9
        config write STA EncrypType 8
        config write STA Ssid myhome
        config write STA SsidLen 6
        config write STA WpaPsk 12345678
        config write STA WpaPskLen 8
        config write common OpMode 1
      \endcode
    - Press the reset button on the 7698 EVK to restart the system.
    - Boot up with the new configuration.
      If everything is correct, similar messages will be shown in the console
      to notify your EVK has received an IP address.
      \code
        DHCP got IP:10.10.10.101
      \endcode
    - PING from the 7698 EVK.
      If the IP address is fetched and the network is operating, the 
      7698 can ping other devices on the network with the following
      command in the console.
      \code
      ping 10.10.10.254 3 64
      The ping stops after sending three packets to 10.10.10.254.
      The ping usage is: ping <ip address> <times> <ping packet length>
      \endcode
    - Wi-Fi configuration options for AuthMode and EncrypType.
      \code
      +---+-------------------------------------+
      | 0 | open, no security                   |
      +---+-------------------------------------+
      | 4 | WPA PSK                             |
      +---+-------------------------------------+
      | 7 | WPA2 PSK                            |
      +---+-------------------------------------+
      | 9 | Support both WPA and WPA2 PSK       |
      +---+-------------------------------------+
      Table 1. Supported AuthMode(s)

      +---+------------------------+
      | 0 | WEP                    |
      +---+------------------------+
      | 1 | No encryption          |
      +---+------------------------+
      | 4 | TKIP                   |
      +---+------------------------+
      | 6 | AES                    |
      +---+------------------------+
      | 8 | Support TKIP and AES   |
      +---+------------------------+
      Table 2. Supported EncrypType(s)
      \endcode
  - Example 2. Wi-Fi access point mode.
    - Provide the Wi-Fi access point settings:
      - SSID
      - Authentication Mode
      - Encryption Type
      - Password
    - Once the information is collected, use the following commands to
      configure the 7698 EVK. This example assumes WPA2 PSK is used for
      authentication, AES for encryption, 'iot_ap' (length 6) for the SSID,
      and the password of the WPA2 is '87654321' (length 8).
        \code
        config write AP Ssid iot_ap
        config write AP SsidLen 6 
        config write AP AuthMode 7
        config write AP EncrypType 6
        config write AP WpaPsk 87654321
        config write AP WpaPskLen 8
        config write common OpMode 2
        \endcode
    - Press the reset button on the 7698 EVK to restart the system.
    - Use a handheld device or a laptop computer to connect to the access point
      'iot_ap'. In the console, the IP address assigned to the the handheld device
      or laptop is:
        \code
        [DHCPD:DBG]lease_ip:10.10.10.2
        \endcode
- Example 3. Connect to a Bluetooth LE device.
    - Use the command "log set BT on info", "log set BTMM on info", "log set
      BTHCI on info" and "log set BTL2CAP on info" to enable the BT system
      log.
    - Use the command 'ble ?' and enter to query the available Bluetooth
      command line options.
    - Input the command "ble gap start_scan 0 0024 0011 1 0" in the serial
      tool to scan for the nearby Bluetooth enabled devices.
      - 0, passive scan.
      - 0024, scan interval (36 * 0.625 ms). Two bytes long HEX value.
      - 0011, scan window (17 * 0.625 ms). Two bytes long HEX value.
      - 1, own address type, 1 means random address.
      - 0, filter policy. A similar log is written to the output:
        \code
        Find a device A, 
        [I][APP] BT_GAP_LE_ADVERTISING_REPORT_IND Success 
        [I][APP] ======================================== 
        [I][APP] Address:       [RANDOM] 73-2c-d4-3f-d3-b2
        [I][APP] Event Type:    ADV_IND
        [I][APP] AD Flags:      LE General Discoverable Mode
        [I][APP] RAW DATA=0x02011a14ff4c000100000000040000000000000000000000
        [I][APP] ========================================
        Find a device B,
        [I][APP] ========================================
        [I][APP] Address:       [RANDOM] ff-76-f0-01-a4-1a
        [I][APP] Event Type:    ADV_IND
        [I][APP] Complete Name: WeLoop B08 DEF4D4
        [I][APP] AD Flags:      LE Limited Discoverable Mode
        [I][APP] RAW DATA=0x120957654c6f6f702042303820444546344434031934120201050303e7fe
        [I][APP] ========================================
        \endcode
    - Connect the device with the command "ble gap connect 1 732cd43fd3b2".
      - 1, random address, based on the [RANDOM] tag. 0, public address based
        on the [PUBLIC] tag.
      - 732cd43fd3b2: remote device address. The output log indicates the
        connection is established with a remote device.
        \code
        [I][APP] BT_GAP_LE_CONNECT_IND Success
        [I][APP] connection handle=0x0200
        [I][APP] role=Master
        [I][APP] peer address:[RANDOM] 73-2c-d4-3f-d3-b2
        \endcode
*/
/**
 * @}
 * @}
 * @}
 */